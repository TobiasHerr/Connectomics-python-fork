# encoding: UTF-8

# Copyright 2012, Olav Stetter
# 
# This file is part of TE-Causality.
# 
# TE-Causality is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# TE-Causality is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with TE-Causality.  If not, see <http://www.gnu.org/licenses/>.

# Rakefile for TE-Causality package.

# path to object files
maketemp_path = "./maketemp"

# Georg's debugging help:
# debugger ddd (or gdb on Mac OSX)
# valgrind --tool=memcheck ./prog

enable_mpi = false


ld_flags_basic = "-lgsl -lgslcblas -lm -lyaml-cpp -L. -lsim -lrt"
ld_flags_flann = "-lflann_cpp"
obj = %W{ #{maketemp_path}/olav.o #{maketemp_path}/te-datainit.o #{maketemp_path}/miniprofiler.o }

main_sources = %W{ xcorr.cpp granger.cpp mi.cpp te-extended.cpp te-binless-Leonenko.cpp te-binless-Kraskov.cpp te-binless-Frenzel.cpp te-symbolic.cpp }
util_sources = %W{ ../olav.cpp ../te-datainit.cpp ../multidimarray.cpp ../multipermutation.cpp ../miniprofiler.cpp }

if enable_mpi
  cc = "mpic++"
  cflags = "-DSIM_MPI -O3"
else
  cc = "g++"
  cflags = "-O3"
end


# ------------------------ Main program tasks ------------------------

desc "Cross-correlation"
file "xcorr" => [:obj, "#{maketemp_path}/xcorr.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/xcorr.o -o xcorr #{ld_flags_basic}"
end

desc "Granger Causality"
file "granger" => [:obj, "#{maketemp_path}/granger.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/granger.o -o granger #{ld_flags_basic}"
end

desc "Mutual Information, discrete binning"
file "mi" => [:obj, :multidimarray, "#{maketemp_path}/mi.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/mi.o #{maketemp_path}/multidimarray.o -o mi #{ld_flags_basic}"
end

desc "Transfer Entropy, discrete binning (default)"
file "te-extended" => [:obj, :multidimarray, "#{maketemp_path}/te-extended.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/te-extended.o #{maketemp_path}/multidimarray.o -o te-extended #{ld_flags_basic}"
end

desc "Transfer Entropy, binless estimator (Kozachenko & Leonenko, 1987)"
file "te-binless-Leonenko" => [:obj, "#{maketemp_path}/te-binless-Leonenko.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/te-binless-Leonenko.o -o te-binless-Leonenko #{ld_flags_basic} #{ld_flags_flann}"
end

desc "Transfer Entropy, binless estimator (Kraskov, StÃ¶gbauer & Grassberger, 2004)"
file "te-binless-Kraskov" => [:obj, "#{maketemp_path}/te-binless-Kraskov.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/te-binless-Kraskov.o -o te-binless-Kraskov #{ld_flags_basic} #{ld_flags_flann}"
end

desc "Transfer Entropy, binless estimator (Frenzel & Pompe, 2007)"
file "te-binless-Frenzel" => [:obj, "#{maketemp_path}/te-binless-Frenzel.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/te-binless-Frenzel.o -o te-binless-Frenzel #{ld_flags_basic} #{ld_flags_flann}"
end

desc "Transfer Entropy, symbolic estimator (Staniek & Lehnertz, 2008) (EXPERIMENTAL)"
file "te-symbolic" => [:obj, :multidimarray, :multipermutation, "#{maketemp_path}/te-symbolic.o"] do
  sh "#{cc} #{cflags} #{obj.whitejoin} #{maketemp_path}/te-symbolic.o #{maketemp_path}/multipermutation.o #{maketemp_path}/multidimarray.o -o te-symbolic #{ld_flags_basic}"
end


# ------------------------ Object file tasks ------------------------

all_sources = [main_sources, util_sources].flatten #[main_sources,sim_sources,util_sources].flatten
all_sources.each do |src|
  name = File.basename(src,".cpp")
  objname = maketemp_path+"/"+name+".o"
  file objname => src do
    sh "#{cc} -c #{cflags} #{src} -o #{objname}"
  end
end


# ------------------------ Other task definitions ------------------------

task :obj => obj

# desc "General utility functions"
task :utils => ["#{maketemp_path}/olav.o", "#{maketemp_path}/te-datainit.o", "#{maketemp_path}/miniprofiler.o"]

# desc "Multi-dimensional array class"
task :multidimarray => "#{maketemp_path}/multidimarray.o"

# desc "Multi-permutation class"
task :multipermutation => "#{maketemp_path}/multipermutation.o"

desc "Unit tests"
file :test => ["causality_test.cpp", :multidimarray, :multipermutation, :obj ] do
  sh "#{cc} #{cflags} causality_test.cpp #{maketemp_path}/multidimarray.o #{maketemp_path}/multipermutation.o #{obj.whitejoin} -o test #{ld_flags_basic}"
end

desc "Clean up everything"
task :clean do
  sh "rm -f te-extended mi te-binless-Frenzel te-binless-Kraskov te-binless-Leonenko te-symbolic xcorr granger test maketemp/*"
	sh "rm -rf *.dSYM ../*.dSYM"
end

desc "Compile all causality programs"
task :all => %w{xcorr granger mi te-extended te-binless-Leonenko te-binless-Kraskov te-binless-Frenzel te-symbolic}

task :default => "te-extended"

class Array
  def whitejoin
    return self.join(' ')
  end
end
  
